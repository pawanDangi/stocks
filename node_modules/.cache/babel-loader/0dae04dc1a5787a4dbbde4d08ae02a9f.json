{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _utils = require(\"@material-ui/utils\");\n\nvar _styles = require(\"@material-ui/core/styles\");\n\nvar _Zoom = _interopRequireDefault(require(\"@material-ui/core/Zoom\"));\n\nvar _transitions = require(\"@material-ui/core/styles/transitions\");\n\nvar _Fab = _interopRequireDefault(require(\"@material-ui/core/Fab\"));\n\nvar _reactHelpers = require(\"@material-ui/core/utils/reactHelpers\");\n\nvar utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _clamp = _interopRequireDefault(require(\"../utils/clamp\"));\n\nvar dialRadius = 32;\nvar spacingActions = 16;\nvar styles = {\n  /* Styles applied to the root element. */\n  root: {\n    zIndex: 1050,\n    display: 'flex',\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied to the Button component. */\n  fab: {\n    pointerEvents: 'auto'\n  },\n\n  /* Styles applied to the root and action container elements when direction=\"up\" */\n  directionUp: {\n    flexDirection: 'column-reverse'\n  },\n\n  /* Styles applied to the root and action container elements when direction=\"down\" */\n  directionDown: {\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the root and action container elements when direction=\"left\" */\n  directionLeft: {\n    flexDirection: 'row-reverse'\n  },\n\n  /* Styles applied to the root and action container elements when direction=\"right\" */\n  directionRight: {\n    flexDirection: 'row'\n  },\n\n  /* Styles applied to the actions (`children` wrapper) element. */\n  actions: {\n    display: 'flex',\n    pointerEvents: 'auto',\n    '&$directionUp': {\n      marginBottom: -dialRadius,\n      paddingBottom: spacingActions + dialRadius\n    },\n    '&$directionRight': {\n      marginLeft: -dialRadius,\n      paddingLeft: spacingActions + dialRadius\n    },\n    '&$directionDown': {\n      marginTop: -dialRadius,\n      paddingTop: spacingActions + dialRadius\n    },\n    '&$directionLeft': {\n      marginRight: -dialRadius,\n      paddingRight: spacingActions + dialRadius\n    }\n  },\n\n  /* Styles applied to the actions (`children` wrapper) element if `open={false}`. */\n  actionsClosed: {\n    transition: 'top 0s linear 0.2s',\n    pointerEvents: 'none'\n  }\n};\nexports.styles = styles;\n\nvar SpeedDial =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(SpeedDial, _React$Component);\n\n  function SpeedDial() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SpeedDial);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SpeedDial)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.actions = [];\n    _this.state = SpeedDial.initialNavigationState;\n\n    _this.handleKeyboardNavigation = function (event) {\n      var key = (0, _keycode.default)(event);\n      var _this$props = _this.props,\n          direction = _this$props.direction,\n          onKeyDown = _this$props.onKeyDown;\n      var _this$state = _this.state,\n          focusedAction = _this$state.focusedAction,\n          _this$state$nextItemA = _this$state.nextItemArrowKey,\n          nextItemArrowKey = _this$state$nextItemA === void 0 ? key : _this$state$nextItemA;\n\n      if (key === 'esc') {\n        _this.closeActions(event, key);\n      } else if (utils.sameOrientation(key, direction)) {\n        event.preventDefault();\n        var actionStep = key === nextItemArrowKey ? 1 : -1; // stay within array indices\n\n        var nextAction = (0, _clamp.default)(focusedAction + actionStep, 0, _this.actions.length - 1);\n        var nextActionRef = _this.actions[nextAction];\n        nextActionRef.focus();\n\n        _this.setState({\n          focusedAction: nextAction,\n          nextItemArrowKey: nextItemArrowKey\n        });\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event, key);\n      }\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(SpeedDial, [{\n    key: \"createHandleSpeedDialActionButtonRef\",\n\n    /**\r\n     * creates a ref callback for the Button in a SpeedDialAction\r\n     * Is called before the original ref callback for Button that was set in buttonProps\r\n     *\r\n     * @param dialActionIndex {number}\r\n     * @param origButtonRef {React.RefObject?}\r\n     */\n    value: function createHandleSpeedDialActionButtonRef(dialActionIndex, origButtonRef) {\n      var _this2 = this;\n\n      return function (ref) {\n        _this2.actions[dialActionIndex + 1] = ref;\n\n        if (origButtonRef) {\n          origButtonRef(ref);\n        }\n      };\n    }\n  }, {\n    key: \"closeActions\",\n    value: function closeActions(event, key) {\n      var onClose = this.props.onClose;\n      this.actions[0].focus();\n      this.setState(SpeedDial.initialNavigationState);\n\n      if (onClose) {\n        onClose(event, key);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this,\n          _actionsPlacementClas;\n\n      var _this$props2 = this.props,\n          ariaLabel = _this$props2.ariaLabel,\n          _this$props2$ButtonPr = _this$props2.ButtonProps;\n      _this$props2$ButtonPr = _this$props2$ButtonPr === void 0 ? {} : _this$props2$ButtonPr;\n      var origDialButtonRef = _this$props2$ButtonPr.buttonRef,\n          ButtonProps = (0, _objectWithoutProperties2.default)(_this$props2$ButtonPr, [\"buttonRef\"]),\n          childrenProp = _this$props2.children,\n          classes = _this$props2.classes,\n          classNameProp = _this$props2.className,\n          hidden = _this$props2.hidden,\n          iconProp = _this$props2.icon,\n          onClick = _this$props2.onClick,\n          onClose = _this$props2.onClose,\n          onKeyDown = _this$props2.onKeyDown,\n          open = _this$props2.open,\n          direction = _this$props2.direction,\n          openIcon = _this$props2.openIcon,\n          TransitionComponent = _this$props2.TransitionComponent,\n          transitionDuration = _this$props2.transitionDuration,\n          TransitionProps = _this$props2.TransitionProps,\n          other = (0, _objectWithoutProperties2.default)(_this$props2, [\"ariaLabel\", \"ButtonProps\", \"children\", \"classes\", \"className\", \"hidden\", \"icon\", \"onClick\", \"onClose\", \"onKeyDown\", \"open\", \"direction\", \"openIcon\", \"TransitionComponent\", \"transitionDuration\", \"TransitionProps\"]); // Filter the label for valid id characters.\n\n      var id = ariaLabel.replace(/^[^a-z]+|[^\\w:.-]+/gi, '');\n      var orientation = utils.getOrientation(direction);\n      var totalValidChildren = 0;\n\n      _react.default.Children.forEach(childrenProp, function (child) {\n        if (_react.default.isValidElement(child)) totalValidChildren += 1;\n      });\n\n      this.actions = [];\n      var validChildCount = 0;\n\n      var children = _react.default.Children.map(childrenProp, function (child) {\n        if (!_react.default.isValidElement(child)) {\n          return null;\n        }\n\n        process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(child.type !== _react.default.Fragment, [\"Material-UI: the SpeedDial component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n')) : void 0;\n        var delay = 30 * (open ? validChildCount : totalValidChildren - validChildCount);\n        validChildCount += 1;\n        var _child$props$ButtonPr = child.props.ButtonProps;\n        _child$props$ButtonPr = _child$props$ButtonPr === void 0 ? {} : _child$props$ButtonPr;\n        var origButtonRef = _child$props$ButtonPr.buttonRef,\n            ChildButtonProps = (0, _objectWithoutProperties2.default)(_child$props$ButtonPr, [\"buttonRef\"]);\n        var NewChildButtonProps = (0, _extends2.default)({}, ChildButtonProps, {\n          buttonRef: _this3.createHandleSpeedDialActionButtonRef(validChildCount - 1, origButtonRef)\n        });\n        return _react.default.cloneElement(child, {\n          ButtonProps: NewChildButtonProps,\n          delay: delay,\n          onKeyDown: _this3.handleKeyboardNavigation,\n          open: open,\n          id: \"\".concat(id, \"-item-\").concat(validChildCount)\n        });\n      });\n\n      var icon = function icon() {\n        if (_react.default.isValidElement(iconProp) && (0, _reactHelpers.isMuiElement)(iconProp, ['SpeedDialIcon'])) {\n          return _react.default.cloneElement(iconProp, {\n            open: open\n          });\n        }\n\n        return iconProp;\n      };\n\n      var actionsPlacementClass = (_actionsPlacementClas = {}, (0, _defineProperty2.default)(_actionsPlacementClas, classes.directionUp, direction === 'up'), (0, _defineProperty2.default)(_actionsPlacementClas, classes.directionDown, direction === 'down'), (0, _defineProperty2.default)(_actionsPlacementClas, classes.directionLeft, direction === 'left'), (0, _defineProperty2.default)(_actionsPlacementClas, classes.directionRight, direction === 'right'), _actionsPlacementClas);\n      var clickProp = {\n        onClick: onClick\n      };\n\n      if (typeof document !== 'undefined' && 'ontouchstart' in document.documentElement) {\n        clickProp = {\n          onTouchEnd: onClick\n        };\n      }\n\n      return _react.default.createElement(\"div\", (0, _extends2.default)({\n        className: (0, _classnames.default)(classes.root, actionsPlacementClass, classNameProp)\n      }, other), _react.default.createElement(TransitionComponent, (0, _extends2.default)({\n        in: !hidden,\n        timeout: transitionDuration,\n        unmountOnExit: true\n      }, TransitionProps), _react.default.createElement(_Fab.default, (0, _extends2.default)({\n        color: \"primary\",\n        onKeyDown: this.handleKeyboardNavigation,\n        \"aria-label\": ariaLabel,\n        \"aria-haspopup\": \"true\",\n        \"aria-expanded\": open ? 'true' : 'false',\n        \"aria-controls\": \"\".concat(id, \"-actions\"),\n        className: classes.fab\n      }, clickProp, ButtonProps, {\n        buttonRef: function buttonRef(ref) {\n          _this3.actions[0] = ref;\n          (0, _reactHelpers.setRef)(origDialButtonRef, ref);\n        }\n      }), icon())), _react.default.createElement(\"div\", {\n        id: \"\".concat(id, \"-actions\"),\n        role: \"menu\",\n        \"aria-orientation\": orientation,\n        className: (0, _classnames.default)(classes.actions, (0, _defineProperty2.default)({}, classes.actionsClosed, !open), actionsPlacementClass)\n      }, children));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // actions were closed while navigation state was not reset\n      if (!props.open && state.nextItemArrowKey !== undefined) {\n        return SpeedDial.initialNavigationState;\n      }\n\n      return null;\n    }\n    /**\r\n     * refs to the Button that have an action associated to them in this SpeedDial\r\n     * [Fab, ...(SpeedDialActions > Button)]\r\n     * @type {HTMLButtonElement[]}\r\n     */\n\n  }]);\n  return SpeedDial;\n}(_react.default.Component);\n\nSpeedDial.initialNavigationState = {\n  /**\r\n   * an index in this.actions\r\n   */\n  focusedAction: 0,\n\n  /**\r\n   * pressing this key while the focus is on a child SpeedDialAction focuses\r\n   * the next SpeedDialAction.\r\n   * It is equal to the first arrow key pressed while focus is on the SpeedDial\r\n   * that is not orthogonal to the direction.\r\n   * @type {utils.ArrowKey?}\r\n   */\n  nextItemArrowKey: undefined\n};\nprocess.env.NODE_ENV !== \"production\" ? SpeedDial.propTypes = {\n  /**\r\n   * The aria-label of the `Button` element.\r\n   * Also used to provide the `id` for the `SpeedDial` element and its children.\r\n   */\n  ariaLabel: _propTypes.default.string.isRequired,\n\n  /**\r\n   * Properties applied to the [`Button`](/api/button/) element.\r\n   */\n  ButtonProps: _propTypes.default.object,\n\n  /**\r\n   * SpeedDialActions to display when the SpeedDial is `open`.\r\n   */\n  children: _propTypes.default.node.isRequired,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css-api) below for more details.\r\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  className: _propTypes.default.string,\n\n  /**\r\n   * The direction the actions open relative to the floating action button.\r\n   */\n  direction: _propTypes.default.oneOf(['up', 'down', 'left', 'right']),\n\n  /**\r\n   * If `true`, the SpeedDial will be hidden.\r\n   */\n  hidden: _propTypes.default.bool,\n\n  /**\r\n   * The icon to display in the SpeedDial Floating Action Button. The `SpeedDialIcon` component\r\n   * provides a default Icon with animation.\r\n   */\n  icon: _propTypes.default.element.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  onClick: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   *\r\n   * @param {object} event The event source of the callback\r\n   * @param {string} key The key pressed\r\n   */\n  onClose: _propTypes.default.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onKeyDown: _propTypes.default.func,\n\n  /**\r\n   * If `true`, the SpeedDial is open.\r\n   */\n  open: _propTypes.default.bool.isRequired,\n\n  /**\r\n   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.\r\n   */\n  openIcon: _propTypes.default.node,\n\n  /**\r\n   * The component used for the transition.\r\n   */\n  TransitionComponent: _utils.componentPropType,\n\n  /**\r\n   * The duration for the transition, in milliseconds.\r\n   * You may specify a single timeout for all transitions, or individually with an object.\r\n   */\n  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n    enter: _propTypes.default.number,\n    exit: _propTypes.default.number\n  })]),\n\n  /**\r\n   * Properties applied to the `Transition` element.\r\n   */\n  TransitionProps: _propTypes.default.object\n} : void 0;\nSpeedDial.defaultProps = {\n  hidden: false,\n  direction: 'up',\n  TransitionComponent: _Zoom.default,\n  transitionDuration: {\n    enter: _transitions.duration.enteringScreen,\n    exit: _transitions.duration.leavingScreen\n  }\n};\n\nvar _default = (0, _styles.withStyles)(styles, {\n  name: 'MuiSpeedDial'\n})(SpeedDial);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}