{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _styles = require(\"@material-ui/core/styles\");\n\nvar _colorManipulator = require(\"@material-ui/core/styles/colorManipulator\");\n\nvar _Fab = _interopRequireDefault(require(\"@material-ui/core/Fab\"));\n\nvar _Tooltip = _interopRequireDefault(require(\"@material-ui/core/Tooltip\")); // @inheritedComponent Tooltip\n\n\nvar styles = function styles(theme) {\n  return {\n    /* Styles applied to the `Button` component. */\n    button: {\n      margin: 8,\n      color: theme.palette.text.secondary,\n      backgroundColor: (0, _colorManipulator.emphasize)(theme.palette.background.default, 0.12),\n      '&:hover': {\n        backgroundColor: (0, _colorManipulator.emphasize)(theme.palette.background.default, 0.15)\n      },\n      transition: \"\".concat(theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shorter\n      }), \", opacity 0.8s\"),\n      opacity: 1\n    },\n\n    /* Styles applied to the `Button` component if `open={false}`. */\n    buttonClosed: {\n      opacity: 0,\n      transform: 'scale(0)'\n    }\n  };\n};\n\nexports.styles = styles;\n\nvar SpeedDialAction =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(SpeedDialAction, _React$Component);\n\n  function SpeedDialAction(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SpeedDialAction);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SpeedDialAction).call(this));\n\n    _this.handleTooltipClose = function () {\n      if (_this.props.tooltipOpen) return;\n\n      _this.setState({\n        tooltipOpen: false\n      });\n    };\n\n    _this.handleTooltipOpen = function () {\n      if (_this.props.tooltipOpen) return;\n\n      _this.setState({\n        tooltipOpen: true\n      });\n    };\n\n    _this.componentDidUpdate = function (prevProps) {\n      if (!_this.props.tooltipOpen || prevProps.open === _this.props.open) return;\n\n      if (!_this.state.tooltipOpen) {\n        _this.timeout = setTimeout(function () {\n          return _this.setState({\n            tooltipOpen: true\n          });\n        }, _this.props.delay + 100);\n      }\n    };\n\n    _this.componentWillUnmount = function () {\n      return clearTimeout(_this.timeout);\n    };\n\n    _this.state = {\n      tooltipOpen: props.tooltipOpen\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(SpeedDialAction, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          ButtonProps = _this$props.ButtonProps,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          delay = _this$props.delay,\n          icon = _this$props.icon,\n          id = _this$props.id,\n          onClick = _this$props.onClick,\n          onKeyDown = _this$props.onKeyDown,\n          open = _this$props.open,\n          tooltipTitle = _this$props.tooltipTitle,\n          TooltipClasses = _this$props.TooltipClasses,\n          tooltipPlacement = _this$props.tooltipPlacement,\n          tooltipOpen = _this$props.tooltipOpen,\n          other = (0, _objectWithoutProperties2.default)(_this$props, [\"ButtonProps\", \"classes\", \"className\", \"delay\", \"icon\", \"id\", \"onClick\", \"onKeyDown\", \"open\", \"tooltipTitle\", \"TooltipClasses\", \"tooltipPlacement\", \"tooltipOpen\"]);\n      var clickProp = {\n        onClick: onClick\n      };\n\n      if (typeof document !== 'undefined' && 'ontouchstart' in document.documentElement) {\n        var startTime;\n        clickProp = {\n          onTouchStart: function onTouchStart() {\n            startTime = new Date();\n          },\n          onTouchEnd: function onTouchEnd() {\n            // only perform action if the touch is a tap, i.e. not long press\n            if (new Date() - startTime < 500) {\n              onClick();\n            }\n          }\n        };\n      }\n\n      return _react.default.createElement(_Tooltip.default, (0, _extends2.default)({\n        id: id,\n        title: tooltipTitle,\n        placement: tooltipPlacement,\n        onClose: this.handleTooltipClose,\n        onOpen: this.handleTooltipOpen,\n        open: open && this.state.tooltipOpen,\n        classes: TooltipClasses\n      }, other), _react.default.createElement(_Fab.default, (0, _extends2.default)({\n        size: \"small\",\n        className: (0, _classnames.default)(className, classes.button, !open && classes.buttonClosed),\n        style: {\n          transitionDelay: \"\".concat(delay, \"ms\")\n        },\n        tabIndex: -1,\n        role: \"menuitem\",\n        onKeyDown: onKeyDown\n      }, ButtonProps, clickProp), icon));\n    }\n  }]);\n  return SpeedDialAction;\n}(_react.default.Component);\n\nSpeedDialAction.getDerivedStateFromProps = function (props, state) {\n  if (!props.open && state.tooltipOpen) {\n    return {\n      tooltipOpen: false\n    };\n  }\n\n  return null;\n};\n\nprocess.env.NODE_ENV !== \"production\" ? SpeedDialAction.propTypes = {\n  /**\r\n   * Properties applied to the [`Button`](/api/button/) component.\r\n   */\n  ButtonProps: _propTypes.default.object,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css-api) below for more details.\r\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  className: _propTypes.default.string,\n\n  /**\r\n   * Adds a transition delay, to allow a series of SpeedDialActions to be animated.\r\n   */\n  delay: _propTypes.default.number,\n\n  /**\r\n   * The Icon to display in the SpeedDial Floating Action Button.\r\n   */\n  icon: _propTypes.default.node.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  id: _propTypes.default.string,\n\n  /**\r\n   * @ignore\r\n   */\n  onClick: _propTypes.default.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onKeyDown: _propTypes.default.func,\n\n  /**\r\n   * @ignore\r\n   */\n  open: _propTypes.default.bool,\n\n  /**\r\n   * Classes applied to the [`Tooltip`](/api/tooltip/) element.\r\n   */\n  TooltipClasses: _propTypes.default.object,\n\n  /**\r\n   * Make the tooltip always visible when the SpeedDial is open.\r\n   */\n  tooltipOpen: _propTypes.default.bool,\n\n  /**\r\n   * Placement of the tooltip.\r\n   */\n  tooltipPlacement: _propTypes.default.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),\n\n  /**\r\n   * Label to display in the tooltip.\r\n   */\n  tooltipTitle: _propTypes.default.node.isRequired\n} : void 0;\nSpeedDialAction.defaultProps = {\n  delay: 0,\n  open: false,\n  tooltipPlacement: 'left',\n  tooltipOpen: false\n};\n\nvar _default = (0, _styles.withStyles)(styles, {\n  name: 'MuiSpeedDialAction'\n})(SpeedDialAction);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}