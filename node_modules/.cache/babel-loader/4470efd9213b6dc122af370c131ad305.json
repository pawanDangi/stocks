{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pdangi/intertrust/media/test-task-media/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pdangi/intertrust/media/test-task-media/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport socket from './socket';\nimport snackbar from '../utils/snackbar';\nimport store from '../store';\nimport { addStocks } from '../actions';\n\nvar fetchStocks =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            // Connection opened\n            socket.addEventListener('open', function () {\n              socket.send('Hello Server!');\n            }); // Listen for messages\n\n            socket.addEventListener('message', function (event) {\n              store.dispatch(addStocks(JSON.parse(event.data || '')));\n            });\n            return _context.abrupt(\"return\", []);\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            snackbar({\n              variant: 'error',\n              message: 'Error while fetching streams data.'\n            });\n            return _context.abrupt(\"return\", []);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 6]]);\n  }));\n\n  return function fetchStocks() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default fetchStocks;","map":{"version":3,"sources":["/Users/pdangi/intertrust/media/test-task-media/src/api/stocks.js"],"names":["socket","snackbar","store","addStocks","fetchStocks","addEventListener","send","event","dispatch","JSON","parse","data","variant","message"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAEA,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhB;AACAJ,YAAAA,MAAM,CAACK,gBAAP,CAAwB,MAAxB,EAAgC,YAAM;AACpCL,cAAAA,MAAM,CAACM,IAAP,CAAY,eAAZ;AACD,aAFD,EAHgB,CAOhB;;AACAN,YAAAA,MAAM,CAACK,gBAAP,CAAwB,SAAxB,EAAmC,UAAAE,KAAK,EAAI;AAC1CL,cAAAA,KAAK,CAACM,QAAN,CAAeL,SAAS,CAACM,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,IAAN,IAAc,EAAzB,CAAD,CAAxB;AACD,aAFD;AARgB,6CAWT,EAXS;;AAAA;AAAA;AAAA;AAahBV,YAAAA,QAAQ,CAAC;AACPW,cAAAA,OAAO,EAAE,OADF;AAEPC,cAAAA,OAAO,EAAE;AAFF,aAAD,CAAR;AAbgB,6CAiBT,EAjBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXT,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAqBA,eAAeA,WAAf","sourcesContent":["import socket from './socket';\nimport snackbar from '../utils/snackbar';\nimport store from '../store';\nimport { addStocks } from '../actions';\n\nconst fetchStocks = async () => {\n  try {\n    // Connection opened\n    socket.addEventListener('open', () => {\n      socket.send('Hello Server!');\n    });\n\n    // Listen for messages\n    socket.addEventListener('message', event => {\n      store.dispatch(addStocks(JSON.parse(event.data || '')));\n    });\n    return [];\n  } catch (error) {\n    snackbar({\n      variant: 'error',\n      message: 'Error while fetching streams data.',\n    });\n    return [];\n  }\n};\n\nexport default fetchStocks;\n"]},"metadata":{},"sourceType":"module"}